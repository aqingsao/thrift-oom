/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.didiglobal.thrift.sample1.samplenew;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.protocol.TCompactProtocol;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TList;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.transport.TIOStreamTransport;

import javax.annotation.Generated;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-11")
public class Items implements TBase<Items, Items._Fields>, Serializable, Cloneable, Comparable<Items> {
  private static final TStruct STRUCT_DESC = new TStruct("Items");

  private static final TField ITEMS_FIELD_DESC = new TField("items", TType.LIST, (short)1);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new ItemsStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new ItemsTupleSchemeFactory();

  public List<Item> items; // required
  private long index;

  public void setIndex(long index) {
    this.index = index;
  }

  public long getIndex() {
    return index;
  }

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ITEMS((short)1, "items");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEMS
          return ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEMS, new FieldMetaData("items", TFieldRequirementType.REQUIRED,
        new ListMetaData(TType.LIST,
            new FieldValueMetaData(TType.STRUCT            , "Item"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(Items.class, metaDataMap);
  }

  public Items() {
  }

  public Items(
    List<Item> items)
  {
    this();
    this.items = items;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Items(Items other) {
    if (other.isSetItems()) {
      List<Item> __this__items = new ArrayList<Item>(other.items.size());
      for (Item other_element : other.items) {
        __this__items.add(new Item(other_element));
      }
      this.items = __this__items;
    }
  }

  public Items deepCopy() {
    return new Items(this);
  }

  @Override
  public void clear() {
    this.items = null;
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public Iterator<Item> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(Item elem) {
    if (this.items == null) {
      this.items = new ArrayList<Item>();
    }
    this.items.add(elem);
  }

  public List<Item> getItems() {
    return this.items;
  }

  public Items setItems(List<Item> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<Item>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEMS:
      return getItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEMS:
      return isSetItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Items)
      return this.equals((Items)that);
    return false;
  }

  public boolean equals(Items that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetItems()) ? 131071 : 524287);
    if (isSetItems())
      hashCode = hashCode * 8191 + items.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Items other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(TProtocol oprot) throws TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Items(");
    boolean first = true;

    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (items == null) {
      throw new TProtocolException("Required field 'items' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(ObjectOutputStream out) throws IOException {
    try {
      write(new TCompactProtocol(new TIOStreamTransport(out)));
    } catch (TException te) {
      throw new IOException(te);
    }
  }

  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    try {
      read(new TCompactProtocol(new TIOStreamTransport(in)));
    } catch (TException te) {
      throw new IOException(te);
    }
  }

  private static class ItemsStandardSchemeFactory implements SchemeFactory {
    public ItemsStandardScheme getScheme() {
      return new ItemsStandardScheme();
    }
  }

  private static class ItemsStandardScheme extends StandardScheme<Items> {

    public void read(TProtocol iprot, Items struct) throws TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEMS
            if (schemeField.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                struct.items = new ArrayList<Item>(_list0.size);
                Item _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Item();
                  _elem1.read(iprot);
                  struct.items.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(TProtocol oprot, Items struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, struct.items.size()));
          for (Item _iter3 : struct.items)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ItemsTupleSchemeFactory implements SchemeFactory {
    public ItemsTupleScheme getScheme() {
      return new ItemsTupleScheme();
    }
  }

  private static class ItemsTupleScheme extends TupleScheme<Items> {

    @Override
    public void write(TProtocol prot, Items struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.items.size());
        for (Item _iter4 : struct.items)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(TProtocol prot, Items struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        TList _list5 = new TList(TType.STRUCT, iprot.readI32());
        struct.items = new ArrayList<Item>(_list5.size);
        Item _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new Item();
          _elem6.read(iprot);
          struct.items.add(_elem6);
        }
      }
      struct.setItemsIsSet(true);
    }
  }

  private static <S extends IScheme> S scheme(TProtocol proto) {
    return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

